/**
 * ====================================================================
 * CHART INTEGRATION CODE EXAMPLES
 * ====================================================================
 *
 * This file contains ready-to-use code snippets for integrating the
 * StockPremiumChart component into your page.tsx file.
 *
 * DO NOT import this file directly - copy the relevant sections.
 */

// ====================================================================
// SECTION 1: IMPORTS (Add to top of page.tsx)
// ====================================================================

import StockPremiumChart, { SectorAverageTrend } from '@/components/StockPremiumChart';
import {
  transformSectorStocksToChartData,
  calculateSectorAverageTrend,
  sortStocksByTotalReturn,
  calculateSectorStats
} from '@/lib/chartHelpers';

// ====================================================================
// SECTION 2: SIMPLE REPLACEMENT - Replace Existing Chart
// ====================================================================

// FIND THIS IN YOUR CODE (around line 382-458):
/*
<div className="mb-6 bg-gray-50 rounded-lg p-4">
  <h4 className="text-lg font-semibold mb-4 text-gray-800">üìà ÊùøÂùó5Â§©Âπ≥ÂùáÊ∫¢‰ª∑Ë∂ãÂäø</h4>
  <div className="h-64">
    <ResponsiveContainer width="100%" height="100%">
      <LineChart data={...}>
        ... existing chart code ...
      </LineChart>
    </ResponsiveContainer>
  </div>
</div>
*/

// REPLACE WITH THIS:
/*
<div className="mb-6 bg-gray-50 rounded-lg p-4">
  <StockPremiumChart
    data={transformSectorStocksToChartData(
      selectedSectorData.stocks,
      selectedSectorData.followUpData,
      10
    )}
    config={{
      height: 280,
      showLegend: true,
      showGrid: true,
      maxStocks: 10
    }}
    title="üìà ‰∏™ËÇ°5Â§©Ê∫¢‰ª∑Ë∂ãÂäøÂØπÊØî"
  />
</div>
*/

// ====================================================================
// SECTION 3: ENHANCED VERSION - With Multiple Charts
// ====================================================================

// Complete sector modal with TWO charts (individual + average):
const EnhancedSectorModalContent = () => (
  <>
    {/* Statistics Cards */}
    {(() => {
      const stats = calculateSectorStats(selectedSectorData.followUpData);
      return (
        <div className="mb-6 grid grid-cols-3 gap-4">
          <div className="bg-blue-50 rounded-lg p-3 text-center">
            <div className="text-xs text-blue-700 mb-1">‰∏™ËÇ°Êï∞Èáè</div>
            <div className="text-xl font-bold text-blue-900">{stats.totalStocks}</div>
          </div>
          <div className="bg-green-50 rounded-lg p-3 text-center">
            <div className="text-xs text-green-700 mb-1">ÁõàÂà©ÊØî‰æã</div>
            <div className="text-xl font-bold text-green-900">{stats.profitRatio}%</div>
          </div>
          <div className="bg-purple-50 rounded-lg p-3 text-center">
            <div className="text-xs text-purple-700 mb-1">Âπ≥ÂùáÊî∂Áõä</div>
            <div className="text-xl font-bold text-purple-900">
              {stats.avgTotalReturn >= 0 ? '+' : ''}{stats.avgTotalReturn.toFixed(2)}%
            </div>
          </div>
        </div>
      );
    })()}

    {/* Chart 1: Individual Stock Trends */}
    <div className="mb-6 bg-gray-50 rounded-lg p-4">
      <StockPremiumChart
        data={transformSectorStocksToChartData(
          selectedSectorData.stocks,
          selectedSectorData.followUpData,
          10
        )}
        config={{
          height: 280,
          showLegend: true,
          showGrid: true,
          maxStocks: 10
        }}
        title="üìà ‰∏™ËÇ°5Â§©Ê∫¢‰ª∑Ë∂ãÂäøÂØπÊØî"
      />
    </div>

    {/* Chart 2: Sector Average Trend */}
    <div className="mb-6 bg-gray-50 rounded-lg p-4">
      <SectorAverageTrend
        sectorName={selectedSectorData.name}
        averageData={calculateSectorAverageTrend(selectedSectorData.followUpData)}
        config={{
          height: 240,
          showGrid: true
        }}
      />
    </div>

    {/* Existing stock list table remains unchanged */}
    <div className="space-y-3 max-h-96 overflow-y-auto">
      {sortStocksByTotalReturn(
        selectedSectorData.stocks,
        selectedSectorData.followUpData
      ).map((stock, index) => (
        <div key={stock.code} className="bg-white rounded-lg p-4 border border-gray-200 hover:shadow-md transition-shadow">
          {/* Keep your existing stock card implementation */}
          <div className="flex justify-between items-start mb-3">
            <div className="flex-1">
              <div className="flex items-center gap-2 mb-1">
                <span className="text-xs text-gray-400 font-mono w-8">#{index + 1}</span>
                <h5
                  className="font-medium text-blue-600 hover:text-blue-800 cursor-pointer hover:underline"
                  onClick={() => handleStockClick(stock.name, stock.code)}
                >
                  {stock.name} ({stock.code})
                </h5>
              </div>
            </div>
            <div className={`px-3 py-1 rounded-full text-sm font-medium ${
              getPerformanceClass(stock.totalReturn)
            }`}>
              Á¥ØËÆ°: {stock.totalReturn.toFixed(1)}%
            </div>
          </div>

          {/* T+1Âà∞T+5Ë°®Áé∞ÁΩëÊ†º */}
          <div className="grid grid-cols-5 gap-2 ml-10">
            {Object.entries(stock.followUpValues)
              .sort(([dateA], [dateB]) => dateA.localeCompare(dateB))
              .slice(0, 5)
              .map(([date, premium], dayIndex) => (
                <div key={date} className="text-center bg-gray-50 rounded p-2">
                  <div className="text-xs text-gray-400 mb-1">
                    {formatDate(date).slice(5)}
                  </div>
                  <div className={`px-2 py-1 rounded text-sm font-medium ${getPerformanceClass(premium)}`}>
                    {premium.toFixed(1)}%
                  </div>
                </div>
              ))}
          </div>
        </div>
      ))}
    </div>
  </>
);

// ====================================================================
// SECTION 4: COMPACT VERSION - Chart Only (Minimal Changes)
// ====================================================================

// If you just want to replace the chart without adding stats:
const CompactChartOnly = () => (
  <div className="mb-6 bg-gray-50 rounded-lg p-4">
    <StockPremiumChart
      data={transformSectorStocksToChartData(
        selectedSectorData.stocks,
        selectedSectorData.followUpData,
        10
      )}
      config={{
        height: 280,
        showLegend: true,
        showGrid: true,
        maxStocks: 10
      }}
      title="üìà ‰∏™ËÇ°5Â§©Ê∫¢‰ª∑Ë∂ãÂäøÂØπÊØî"
    />
  </div>
);

// ====================================================================
// SECTION 5: CUSTOM CONFIGURATIONS
// ====================================================================

// Configuration 1: Show only top 5 stocks without legend (cleaner)
const TopFiveConfig = () => (
  <StockPremiumChart
    data={transformSectorStocksToChartData(
      selectedSectorData.stocks,
      selectedSectorData.followUpData,
      5
    )}
    config={{
      height: 250,
      showLegend: false,
      showGrid: true,
      maxStocks: 5
    }}
    title="üìà Ââç5Âº∫‰∏™ËÇ°Ë°®Áé∞"
  />
);

// Configuration 2: Tall chart for detailed analysis
const DetailedConfig = () => (
  <StockPremiumChart
    data={transformSectorStocksToChartData(
      selectedSectorData.stocks,
      selectedSectorData.followUpData,
      15
    )}
    config={{
      height: 400,
      showLegend: true,
      showGrid: true,
      maxStocks: 15
    }}
    title="üìà ÊùøÂùóËØ¶ÁªÜÂàÜÊûêÔºàÂâç15Âè™Ôºâ"
  />
);

// Configuration 3: Custom colors
const CustomColorConfig = () => (
  <StockPremiumChart
    data={transformSectorStocksToChartData(
      selectedSectorData.stocks,
      selectedSectorData.followUpData,
      8
    )}
    config={{
      height: 300,
      showLegend: true,
      showGrid: true,
      maxStocks: 8,
      colors: [
        '#da4453', // Stock red
        '#37bc9b', // Stock green
        '#434a54', // Stock dark
        '#4a89dc', // Stock blue
        '#967adc', // Stock purple
        '#f6bb42', // Stock yellow
        '#e9573f', // Stock orange
        '#3bafda', // Stock light blue
      ]
    }}
    title="üìà Ëá™ÂÆö‰πâÈÖçËâ≤ÊñπÊ°à"
  />
);

// ====================================================================
// SECTION 6: TWO-COLUMN LAYOUT (Side by Side)
// ====================================================================

// Show individual and average charts side by side:
const TwoColumnLayout = () => (
  <div className="mb-6 grid grid-cols-2 gap-4">
    {/* Left: Individual Stocks */}
    <div className="bg-gray-50 rounded-lg p-4">
      <StockPremiumChart
        data={transformSectorStocksToChartData(
          selectedSectorData.stocks,
          selectedSectorData.followUpData,
          10
        )}
        config={{
          height: 260,
          showLegend: false,
          showGrid: true,
          maxStocks: 10
        }}
        title="‰∏™ËÇ°Ë°®Áé∞"
      />
    </div>

    {/* Right: Sector Average */}
    <div className="bg-gray-50 rounded-lg p-4">
      <SectorAverageTrend
        sectorName={selectedSectorData.name}
        averageData={calculateSectorAverageTrend(selectedSectorData.followUpData)}
        config={{
          height: 260,
          showGrid: true
        }}
      />
    </div>
  </div>
);

// ====================================================================
// SECTION 7: FULL MODAL REPLACEMENT CODE
// ====================================================================

// Complete modal code ready to paste:
const FullModalReplacement = () => (
  <div className="fixed inset-0 bg-black bg-opacity-70 flex justify-center items-center z-50">
    <div className="bg-white rounded-xl p-6 max-w-5xl max-h-[90vh] overflow-auto shadow-2xl">
      {/* Header */}
      <div className="flex justify-between items-center mb-4 pb-4 border-b border-gray-200">
        <h3 className="text-xl font-bold text-gray-900">
          üìä {selectedSectorData.name} - ‰∏™ËÇ°Ê¢ØÈòüËØ¶ÊÉÖ ({formatDate(selectedSectorData.date)})
        </h3>
        <button
          onClick={closeSectorModal}
          className="w-8 h-8 flex items-center justify-center rounded-full hover:bg-gray-100 text-gray-500 hover:text-red-500 transition-colors"
        >
          ‚úï
        </button>
      </div>

      <div className="mb-4 text-sm text-gray-600">
        ÂÖ± {selectedSectorData.stocks.length} Âè™‰∏™ËÇ°ÔºåÊåâ5Êó•Á¥ØËÆ°Ê∫¢‰ª∑ÊéíÂ∫è
      </div>

      {/* NEW: Statistics Summary */}
      {(() => {
        const stats = calculateSectorStats(selectedSectorData.followUpData);
        return (
          <div className="mb-6 grid grid-cols-4 gap-3">
            <div className="bg-blue-50 rounded-lg p-3 text-center">
              <div className="text-xs text-blue-700 mb-1">‰∏™ËÇ°Êï∞Èáè</div>
              <div className="text-xl font-bold text-blue-900">{stats.totalStocks}</div>
            </div>
            <div className="bg-green-50 rounded-lg p-3 text-center">
              <div className="text-xs text-green-700 mb-1">ÁõàÂà©Áéá</div>
              <div className={`text-xl font-bold ${
                stats.profitRatio >= 60 ? 'text-green-900' :
                stats.profitRatio >= 40 ? 'text-yellow-700' : 'text-red-700'
              }`}>
                {stats.profitRatio}%
              </div>
            </div>
            <div className="bg-purple-50 rounded-lg p-3 text-center">
              <div className="text-xs text-purple-700 mb-1">Âπ≥ÂùáÊî∂Áõä</div>
              <div className={`text-xl font-bold ${
                stats.avgTotalReturn >= 0 ? 'text-red-700' : 'text-green-700'
              }`}>
                {stats.avgTotalReturn >= 0 ? '+' : ''}{stats.avgTotalReturn.toFixed(2)}%
              </div>
            </div>
            <div className="bg-orange-50 rounded-lg p-3 text-center">
              <div className="text-xs text-orange-700 mb-1">Êî∂ÁõäÂå∫Èó¥</div>
              <div className="text-sm font-bold text-orange-900">
                {stats.minReturn.toFixed(1)} ~ {stats.maxReturn.toFixed(1)}%
              </div>
            </div>
          </div>
        );
      })()}

      {/* NEW: Individual Stock Premium Chart */}
      <div className="mb-6 bg-gray-50 rounded-lg p-4">
        <StockPremiumChart
          data={transformSectorStocksToChartData(
            selectedSectorData.stocks,
            selectedSectorData.followUpData,
            10
          )}
          config={{
            height: 280,
            showLegend: true,
            showGrid: true,
            maxStocks: 10
          }}
          title="üìà ‰∏™ËÇ°5Â§©Ê∫¢‰ª∑Ë∂ãÂäøÂØπÊØî"
        />
      </div>

      {/* NEW: Sector Average Chart */}
      <div className="mb-6 bg-gray-50 rounded-lg p-4">
        <SectorAverageTrend
          sectorName={selectedSectorData.name}
          averageData={calculateSectorAverageTrend(selectedSectorData.followUpData)}
          config={{
            height: 240,
            showGrid: true
          }}
        />
      </div>

      {/* EXISTING: Stock list table - Keep your current implementation */}
      <div className="space-y-3 max-h-96 overflow-y-auto">
        {sortStocksByTotalReturn(
          selectedSectorData.stocks,
          selectedSectorData.followUpData
        ).map((stock, index) => {
          const followUpDates = Object.keys(stock.followUpValues).sort();
          return (
            <div key={stock.code} className="bg-white rounded-lg p-4 border border-gray-200 hover:shadow-md transition-shadow">
              <div className="flex justify-between items-start mb-3">
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-1">
                    <span className="text-xs text-gray-400 font-mono w-8">#{index + 1}</span>
                    <h5
                      className="font-medium text-blue-600 hover:text-blue-800 cursor-pointer hover:underline"
                      onClick={() => handleStockClick(stock.name, stock.code)}
                    >
                      {stock.name} ({stock.code})
                    </h5>
                  </div>
                  <div className="flex items-center gap-2 text-xs text-gray-500 ml-10">
                    <span>{stock.td_type}</span>
                  </div>
                </div>
                <div className={`px-3 py-1 rounded-full text-sm font-medium ${
                  getPerformanceClass(stock.totalReturn)
                }`}>
                  Á¥ØËÆ°: {stock.totalReturn.toFixed(1)}%
                </div>
              </div>

              {/* T+1Âà∞T+5Ë°®Áé∞ÁΩëÊ†º */}
              <div className="grid grid-cols-5 gap-2 ml-10">
                {followUpDates.slice(0, 5).map((followDate, dayIndex) => {
                  const performance = stock.followUpValues[followDate] || 0;
                  let formattedDate = '';
                  try {
                    const formatted = formatDate(followDate);
                    formattedDate = formatted ? formatted.slice(5) : `Êó•Êúü${dayIndex + 1}`;
                  } catch (error) {
                    formattedDate = `Êó•Êúü${dayIndex + 1}`;
                  }

                  return (
                    <div key={followDate} className="text-center bg-gray-50 rounded p-2">
                      <div className="text-xs text-gray-400 mb-1">{formattedDate}</div>
                      <div className={`px-2 py-1 rounded text-sm font-medium ${getPerformanceClass(performance)}`}>
                        {performance.toFixed(1)}%
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          );
        })}
      </div>
    </div>
  </div>
);

// ====================================================================
// SECTION 8: QUICK REFERENCE - Function Signatures
// ====================================================================

/*
// Transform sector data to chart format
transformSectorStocksToChartData(
  stocks: StockPerformance[],
  followUpData: Record<string, Record<string, number>>,
  maxStocks: number = 10
): StockPremiumData[]

// Calculate sector average trend
calculateSectorAverageTrend(
  followUpData: Record<string, Record<string, number>>
): { date: string; avgPremium: number; stockCount: number; }[]

// Sort stocks by total return
sortStocksByTotalReturn(
  stocks: StockPerformance[],
  followUpData: Record<string, Record<string, number>>
): (StockPerformance & { totalReturn: number; followUpValues: Record<string, number> })[]

// Calculate sector statistics
calculateSectorStats(
  followUpData: Record<string, Record<string, number>>
): {
  totalStocks: number;
  profitableStocks: number;
  profitRatio: number;
  avgTotalReturn: number;
  maxReturn: number;
  minReturn: number;
}
*/

// ====================================================================
// END OF CODE EXAMPLES
// ====================================================================

export {}; // Make this a module