# v4.8.14 部署指南 - 分时图功能新增

## 新增功能

### 1. 独立分时图批量展示弹窗
- **特点**: 最高层级弹窗(z-index: 90)
- **布局**: 98vw × 95vh (充分利用屏幕空间)
- **网格**: 响应式4列布局(小屏3列)
- **分页**: 每页显示12只个股分时图
- **颜色**: 绿色主题(区别于K线的蓝色)

### 2. 板块详情弹窗新增"今日分时"按钮
- **位置**: 右上角控制区，"📈 显示K线"按钮左侧
- **按钮**: 📊 今日分时 (绿色bg-green-600)
- **功能**: 点击打开该板块独立分时图弹窗

### 3. 涨停数弹窗板块标题新增分时按钮
- **位置**: 每个板块标题右侧，K线按钮左侧
- **按钮**: 📊M (绿色小按钮)
- **功能**: 点击直接打开该板块独立分时图弹窗

### 4. 单股弹窗改造为分时+K线左右分屏
- **原功能**: 点击股票名称只显示K线图
- **新功能**: 左侧50%显示分时图，右侧50%显示K线图
- **标题**: 今日分时 & K线图
- **颜色**: 分时图绿色徽章，K线图蓝色徽章

## Git信息
```
Commit: (待生成)
Message: feat: v4.8.14 新增分时图功能
Date: 2025-10-13
```

## API接口

### 分时图API
```
http://image.sinajs.cn/newchart/min/n/{sh/sz}code.gif

示例:
- 沪市: http://image.sinajs.cn/newchart/min/n/sh600000.gif
- 深市: http://image.sinajs.cn/newchart/min/n/sz000001.gif
```

### K线图API (已有)
```
http://image.sinajs.cn/newchart/daily/{sh/sz}code.gif
```

**关键差异**: 分时图API路径中多了 `/n/` 目录

## 服务器部署命令(多行版本,逐行复制)

### 步骤1: 进入项目目录
```bash
cd /www/wwwroot/stock-tracker
```

### 步骤2: 拉取最新代码
```bash
git fetch origin
```

```bash
git pull origin main
```

### 步骤3: 验证代码版本
```bash
git log -1 --format="%h %s"
```
**预期输出**: `xxxxxxx feat: v4.8.14 新增分时图功能`

### 步骤4: 停止当前容器
```bash
docker compose down
```

### 步骤5: 重新构建(无缓存)⭐ 关键步骤
```bash
docker compose build --no-cache
```
**说明**: 这一步确保新代码被包含到Docker镜像中(约需3-5分钟)

### 步骤6: 启动新容器
```bash
docker compose up -d
```

### 步骤7: 等待服务启动
```bash
sleep 30
```

### 步骤8: 查看日志验证
```bash
docker logs --tail 30 stock-tracker-app
```

### 步骤9: 测试API响应
```bash
curl -s "http://localhost:3002/api/stocks?date=$(date +%Y-%m-%d)&mode=7days" | head -c 200
```

## 验证部署

### 服务器端验证
```bash
# 1. 确认容器运行
docker ps | grep stock-tracker

# 2. 确认代码版本
cd /www/wwwroot/stock-tracker && git log -1 --oneline

# 3. 确认镜像构建时间(应该是今天)
docker images | grep stock-tracker
```

### 浏览器端验证

#### 测试场景1: 板块详情弹窗分时按钮
1. 访问 http://bk.yushuo.click
2. 强制刷新: `Ctrl+Shift+R` (Windows/Linux) 或 `Cmd+Shift+R` (Mac)
3. 点击任意日期的板块名称
4. 在弹出的板块详情弹窗右上角，应该看到 **📊 今日分时** 按钮
5. 点击该按钮
6. **预期**: 打开独立分时图弹窗，显示该板块所有个股分时图

#### 测试场景2: 涨停数弹窗分时按钮
1. 访问 http://bk.yushuo.click
2. 点击任意日期的"XX 只涨停"
3. 在弹出的涨停数弹窗中，每个板块标题右侧应该看到 **📊M** 按钮(绿色)
4. 点击任意板块的📊M按钮
5. **预期**: 打开独立分时图弹窗，显示该板块所有个股分时图

#### 测试场景3: 独立分时图弹窗
1. 打开独立分时图弹窗(通过上述步骤)
2. 验证弹窗特点:
   - 弹窗占据几乎整个屏幕(98vw × 95vh)
   - 分时图以3-4列网格显示
   - 每页显示12只个股
   - 如果个股>12只,显示分页控制(上一页/下一页)
   - 绿色主题(区别于K线弹窗的蓝色)
3. 验证分页功能:
   - 点击"下一页"切换到第2页
   - 页码显示正确(例: 第 2 / 3 页)
   - 第1页"上一页"按钮禁用
   - 最后一页"下一页"按钮禁用
4. 验证分时图加载:
   - 分时图正常显示(来自新浪财经API)
   - 加载失败时显示灰色占位图
   - 图片懒加载(loading="lazy")
5. 验证交互:
   - 点击个股名称,打开单股分时+K线分屏弹窗
   - 点击关闭按钮(✕),弹窗正确关闭

#### 测试场景4: 单股分时+K线分屏弹窗
1. 点击任意个股名称(从任何弹窗中)
2. **预期**: 弹窗标题为"{股票名称} ({代码}) 今日分时 & K线图"
3. 验证布局:
   - 左侧50%: 分时图 (绿色徽章 "📊 今日分时")
   - 右侧50%: K线图 (蓝色徽章 "📈 日K线图")
   - 中间有竖线分隔
4. 验证图片:
   - 分时图URL: `http://image.sinajs.cn/newchart/min/n/{sh/sz}code.gif`
   - K线图URL: `http://image.sinajs.cn/newchart/daily/{sh/sz}code.gif`
   - 两张图片均清晰显示
   - 加载失败时显示占位图

#### 测试场景5: 按钮顺序验证
1. 打开板块详情弹窗
2. 验证右上角按钮顺序:**[📊 今日分时] [📈 显示K线] [显示涨幅>10%] [✕]**
3. 打开涨停数弹窗
4. 验证板块标题按钮顺序:**[板块名称] [📊M] [📈K] [平均溢价]**

## 技术细节

### 修改的文件
- `src/app/page.tsx` (主要修改文件)
  - lines 52-55: 新增独立分时图弹窗状态管理
  - lines 315-331: 新增handleOpenMinuteModal和closeMinuteModal函数
  - lines 553-565: 板块详情弹窗添加"今日分时"按钮
  - lines 1031-1045: 涨停数弹窗板块标题添加📊M按钮
  - lines 1466-1524: 修改单股弹窗为分时+K线左右分屏
  - lines 1591-1680: 独立分时图弹窗组件

### 状态管理
```typescript
// 独立分时图弹窗状态
const [showMinuteModal, setShowMinuteModal] = useState(false);
const [minuteModalData, setMinuteModalData] = useState<{
  sectorName: string,
  date: string,
  stocks: StockPerformance[]
} | null>(null);
const [minuteModalPage, setMinuteModalPage] = useState(0);
```

### Z-index层级
- z-40: 弹窗背景
- z-50: 普通弹窗
- z-[60]: 日期列详情弹窗
- z-[70]: 单股分时+K线弹窗
- z-[80]: 独立K线弹窗
- **z-[90]: 独立分时图弹窗(最高层)** ⭐

### 分时图URL格式
```typescript
// 沪市股票 (6开头) - 注意路径中的 /n/
http://image.sinajs.cn/newchart/min/n/sh600000.gif

// 深市股票 (0开头) - 注意路径中的 /n/
http://image.sinajs.cn/newchart/min/n/sz000001.gif
```

**关键差异**: 分时图API比K线图API多了 `/n/` 路径

### 分页逻辑
```typescript
// 每页12个
const startIndex = minuteModalPage * 12;
const endIndex = (minuteModalPage + 1) * 12;

// 切片数组
minuteModalData.stocks.slice(startIndex, endIndex)

// 总页数
Math.ceil(minuteModalData.stocks.length / 12)
```

### 响应式布局
```css
grid-cols-3        /* 小屏: 3列 */
xl:grid-cols-4     /* 大屏: 4列 (≥1280px) */

/* 单股弹窗分屏 */
grid-cols-2        /* 固定2列: 分时50% + K线50% */
```

### 颜色主题
- **分时图**: 绿色系
  - 按钮: bg-green-600, bg-green-100
  - 徽章: bg-green-100 text-green-700
  - 悬停: hover:border-green-400
- **K线图**: 蓝色系
  - 按钮: bg-blue-600, bg-blue-100
  - 徽章: bg-blue-100 text-blue-700
  - 悬停: hover:border-blue-400

## 测试清单

### 功能完整性
- [ ] 板块详情弹窗有"📊 今日分时"按钮
- [ ] 涨停数弹窗每个板块标题右侧有📊M按钮
- [ ] 点击分时按钮打开独立分时图弹窗
- [ ] 独立分时图弹窗占据98vw×95vh屏幕空间
- [ ] 分时图以3-4列网格显示
- [ ] 每页显示12只个股分时图
- [ ] 分页控制正常工作(上一页/下一页)
- [ ] 分时图正常加载(来自新浪财经API)
- [ ] 加载失败时显示占位图
- [ ] 点击个股名称打开分时+K线分屏弹窗
- [ ] 分屏弹窗左侧显示分时图,右侧显示K线图
- [ ] 按钮颜色和位置正确(绿色分时、蓝色K线)
- [ ] 关闭弹窗功能正常

### 性能指标
- [ ] 独立分时图弹窗打开速度 <500ms
- [ ] 分时图懒加载生效
- [ ] 分页切换流畅无卡顿
- [ ] 多层弹窗z-index层级正确
- [ ] 分时图和K线图同时加载不卡顿

### 兼容性
- [ ] Chrome浏览器正常显示
- [ ] Firefox浏览器正常显示
- [ ] Edge浏览器正常显示
- [ ] 移动端响应式布局正确
- [ ] 分屏布局在不同屏幕尺寸下正常

## 回滚方案

如果v4.8.14有问题,回滚到v4.8.13(K线排序一致性版本):
```bash
cd /www/wwwroot/stock-tracker && git fetch origin && git checkout v4.8.13 && docker compose down && docker compose build --no-cache && docker compose up -d && echo "✅ 已回滚到v4.8.13"
```

或回滚到v4.8.12(独立K线弹窗版本):
```bash
cd /www/wwwroot/stock-tracker && git fetch origin && git checkout 7333eee && docker compose down && docker compose build --no-cache && docker compose up -d && echo "✅ 已回滚到v4.8.12"
```

## 常见问题

### Q1: 独立分时图弹窗不显示?
**排查步骤**:
1. 确认浏览器已强制刷新(Ctrl+Shift+R)
2. 打开开发者工具(F12) > Console,查看是否有JavaScript错误
3. 检查Network标签,确认分时图URL请求状态
4. 验证服务器代码版本: `git log -1 --oneline` 应包含"分时图"关键词

### Q2: 分时图加载失败?
**可能原因**:
1. 新浪财经API访问受限(网络问题)
2. 股票代码格式转换错误
3. API路径错误(忘记 `/n/`)

**排查步骤**:
```bash
# 测试分时图URL (注意路径中的 /n/)
curl -I "http://image.sinajs.cn/newchart/min/n/sh600000.gif"
# 预期: HTTP/1.1 200 OK

# 对比K线图URL (没有 /n/)
curl -I "http://image.sinajs.cn/newchart/daily/sh600000.gif"
# 预期: HTTP/1.1 200 OK
```

### Q3: 单股弹窗没有分时图?
**排查步骤**:
1. 确认Docker镜像已重新构建(build --no-cache)
2. 确认浏览器缓存已清除
3. 检查代码版本: 应包含lines 1466-1524的分屏布局代码
4. 检查弹窗标题是否为"今日分时 & K线图"

### Q4: 分时图和K线图显示不对齐?
**预期布局**: 左右各50%,中间有border分隔

**如果布局错误**:
1. 检查CSS Grid: 应该是 `grid-cols-2`
2. 检查容器宽度: 应该是 `max-w-6xl w-full`
3. 确认代码已更新到v4.8.14
4. 强制刷新浏览器

### Q5: 分时按钮和K线按钮颜色一样?
**预期颜色**:
- 分时按钮: 绿色 (bg-green-600, bg-green-100)
- K线按钮: 蓝色 (bg-blue-600, bg-blue-100)

**如果颜色错误**:
1. 确认代码版本正确
2. 检查CSS类名是否包含"green"
3. 清除浏览器缓存

### Q6: 分时图URL路径错误?
**正确路径**: `http://image.sinajs.cn/newchart/min/n/{sh/sz}code.gif`
**错误路径**: `http://image.sinajs.cn/newchart/min/{sh/sz}code.gif` (缺少 /n/)

**验证方法**:
1. 打开开发者工具 > Network标签
2. 筛选 "newchart"
3. 查看分时图请求URL
4. 确认路径包含 `/min/n/` 而不是 `/min/`

## 新增功能对比

| 功能 | v4.8.13 | v4.8.14 |
|------|---------|---------|
| 独立K线弹窗 | ✅ | ✅ |
| **独立分时图弹窗** | ❌ | ✅ (新增) |
| 板块详情分时按钮 | ❌ | ✅ (新增) |
| 涨停数弹窗分时按钮 | ❌ | ✅ (新增) |
| 单股K线显示 | ✅ | ✅ |
| **单股分时+K线分屏** | ❌ | ✅ (新增) |
| 全局排序控制 | ✅ | ✅ |
| K线排序一致性 | ✅ | ✅ |

## 用户体验提升

### 新增价值
1. **多维度分析**: 用户可以同时查看分时和K线,更全面了解个股走势
2. **批量对比**: 独立分时图弹窗支持快速浏览板块内所有个股的当日分时
3. **操作便捷**: 分时按钮紧邻K线按钮,操作逻辑一致
4. **视觉区分**: 绿色主题分时图与蓝色主题K线图清晰区分

### 使用场景
- **盘中监控**: 通过分时图实时观察个股当日走势
- **涨停分析**: 批量查看涨停板块个股的分时形态
- **买点判断**: 结合分时图和K线图综合判断买卖点

## 用户反馈

如遇到问题,请提供:
1. 浏览器类型和版本
2. 开发者工具Console错误信息
3. 问题截图(特别是分时图加载失败时)
4. 操作步骤复现
5. Network标签中分时图URL请求详情

## 相关文档
- **v4.8.13部署指南**: DEPLOY-v4.8.13.txt (K线排序一致性)
- **v4.8.12部署指南**: DEPLOY-v4.8.12.txt (独立K线弹窗)
- **v4.8.11部署指南**: DEPLOY-v4.8.11.txt (K线批量展示)
- **502错误诊断**: log/502-ERROR-REPORT-20251013.md
- **修复脚本**: server-fix-502.sh

---

**生成时间**: 2025-10-13
**版本**: v4.8.14
**新增功能**: 分时图批量展示 + 单股分时+K线分屏
**前置版本**: v4.8.13 (K线排序一致性)
**作者**: Claude Code
