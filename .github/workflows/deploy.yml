name: GitHub自动同步到宝塔服务器

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 部署到宝塔服务器
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 22
        script: |
          echo "=== GitHub自动同步部署开始 ==="
          echo "时间: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "提交: ${{ github.sha }}"
          echo "仓库: ${{ github.repository }}"

          # 配置变量
          REPO_URL="https://github.com/${{ github.repository }}.git"
          DEPLOY_PATH="/www/wwwroot/stock-tracker"
          CONTAINER_NAME="stock-tracker-app"
          IMAGE_NAME="stock-tracker:latest"

          # 创建日志目录
          mkdir -p ${DEPLOY_PATH}/log
          echo "$(date) - GitHub Actions自动部署开始 - ${{ github.sha }}" >> ${DEPLOY_PATH}/log/deploy.log

          # 停止旧容器
          echo "步骤1: 停止旧容器..."
          docker stop ${CONTAINER_NAME} 2>/dev/null || echo "容器未运行"
          docker rm ${CONTAINER_NAME} 2>/dev/null || echo "容器不存在"

          # 同步GitHub代码
          echo "步骤2: 同步GitHub代码..."
          if [ -d "${DEPLOY_PATH}/.git" ]; then
            echo "更新现有仓库..."
            cd ${DEPLOY_PATH}
            git fetch origin
            git reset --hard origin/main
            git pull origin main
          else
            echo "克隆新仓库..."
            rm -rf ${DEPLOY_PATH}
            git clone ${REPO_URL} ${DEPLOY_PATH}
          fi

          echo "当前版本: $(cd ${DEPLOY_PATH} && git log --oneline -1)"

          # 构建Docker镜像
          echo "步骤3: 构建Docker镜像..."
          cd ${DEPLOY_PATH}
          docker build -t ${IMAGE_NAME} . 2>&1 | tee log/build-$(date +%Y%m%d_%H%M%S).log

          if [ $? -ne 0 ]; then
            echo "❌ Docker镜像构建失败" | tee -a log/deploy.log
            exit 1
          fi

          # 设置数据目录权限
          echo "步骤4: 设置数据目录..."
          mkdir -p ${DEPLOY_PATH}/data
          chmod 755 ${DEPLOY_PATH}/data
          chown -R 1001:1001 ${DEPLOY_PATH}/data

          # 启动新容器
          echo "步骤5: 启动新Docker容器..."
          docker run -d \
            --name ${CONTAINER_NAME} \
            --restart always \
            -p 3000:3000 \
            -v ${DEPLOY_PATH}/data:/app/data \
            -e NODE_ENV=production \
            -e PORT=3000 \
            -e HOSTNAME=0.0.0.0 \
            -e TUSHARE_TOKEN=2876ea85cb005fb5fa17c809a98174f2d5aae8b1f830110a5ead6211 \
            -e NEXT_PUBLIC_API_URL=http://bk.yushuo.click \
            -e NEXT_PUBLIC_API_BASE_URL=http://bk.yushuo.click/api \
            -e NEXTAUTH_SECRET=stock-tracker-secret-key-2024 \
            -e NEXTAUTH_URL=http://bk.yushuo.click \
            ${IMAGE_NAME}

          if [ $? -ne 0 ]; then
            echo "❌ 容器启动失败" | tee -a log/deploy.log
            docker logs ${CONTAINER_NAME} | tee -a log/deploy.log
            exit 1
          fi

          # 等待服务启动
          echo "步骤6: 等待服务启动..."
          sleep 20

          # 健康检查
          echo "步骤7: 执行健康检查..."
          for i in {1..15}; do
            if curl -s -f http://127.0.0.1:3000 >/dev/null 2>&1; then
              echo "✅ 应用启动成功！"
              break
            fi
            echo "等待应用启动... ($i/15)"
            sleep 3
          done

          # 测试API接口
          echo "步骤8: 测试API接口..."
          curl -I http://127.0.0.1:3000/api/stocks 2>&1 | tee log/api-test-$(date +%Y%m%d_%H%M%S).log

          # 重载Nginx
          echo "步骤9: 重载Nginx配置..."
          nginx -t && nginx -s reload

          # 记录部署完成
          echo "$(date) - GitHub Actions部署完成 - ${{ github.sha }}" >> ${DEPLOY_PATH}/log/deploy.log

          echo ""
          echo "=== 部署完成 ==="
          echo "🌍 访问地址: http://bk.yushuo.click"
          echo "🔗 API测试: http://bk.yushuo.click/api/stocks"
          echo "📊 容器状态:"
          docker ps | grep ${CONTAINER_NAME}
          echo ""

    - name: 通知部署结果
      if: always()
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          LOG_FILE="/www/wwwroot/stock-tracker/logs/deploy.log"
          if [ -f "$LOG_FILE" ]; then
            echo "最近部署日志："
            tail -20 $LOG_FILE
          fi

          # 检查应用状态
          if curl -f http://localhost:3000 > /dev/null 2>&1; then
            echo "✅ 应用运行正常"
          else
            echo "❌ 应用可能存在问题"
          fi

    - name: 创建部署标签
      if: success()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        TAG_NAME="deploy-$(date +%Y%m%d-%H%M%S)"
        git tag $TAG_NAME
        git push origin $TAG_NAME